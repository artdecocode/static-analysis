<types namespace="_staticAnalysis">
  <type name="Config" desc="The configuration options for `staticAnalysis`.">
    <prop type="boolean" name="nodeModules" default="true">
      Whether to include packages from `node_modules` in the output.
    </prop>
    <prop type="boolean" name="shallow" default="false">
      Only report on the entries of `node_module` dependencies, without analysing their own dependencies.
    </prop>
    <prop type="boolean" name="soft" default="false">
      Do not throw an error when the dependency cannot be found in `node_modules`.
    </prop>
    <prop opt type="!Array<string>" name="fields">
      Any additional fields from `package.json` files to return.
    </prop>
  </type>
  <type name="Detection" desc="The module detection result.">
    <prop opt string name="entry">
      The path to the JavaScript file to be required. If an internal Node.js package is required, it's name is found in the `internal` field.
    </prop>
    <prop type="!Array<string>" name="from">
      The file in which the dependency was found.
    </prop>
    <prop opt string name="packageJson">
      The path to the `package.json` file of the dependency if it's a module.
    </prop>
    <prop opt string name="name">
      The name of the package.
    </prop>
    <prop opt string name="version">
      The version of the package.
    </prop>
    <prop opt string name="internal">
      If it's an internal NodeJS dependency, such as `fs` or `path`, contains its name.
    </prop>
    <prop opt boolean name="hasMain">
      Whether the entry from the package was specified via the `main` field and not `module` field.
    </prop>
    <prop opt string name="package">
      If the entry is a library file withing a package, this field contains its name. Same as the `name` field for the _main/module_ entries.
    </prop>
    <prop opt boolean name="required">
      Whether the package was required using the `require` statement.
    </prop>
  </type>
  <type name="DependencyMeta">
    <prop opt string name="internal">
      The name of the internal Node.JS package.
    </prop>
    <prop opt string name="packageJson">
      The location of the _package.json_ file.
    </prop>
    <prop opt string name="entry">
      The entry to the package (module or main fields).
    </prop>
    <prop opt string name="package">
      The package the entry belongs to.
    </prop>
    <prop opt boolean name="hasMain">
      Whether the dependency has main field.
    </prop>
    <prop opt boolean name="required">
      Whether the dependency was required.
    </prop>
  </type>
  <type record name="SortReturn" desc="The return of the sort function.">
    <prop type="!Array<string>" name="packageJsons"/>
    <prop type="!Array<string>" name="commonJsPackageJsons"/>
    <prop type="!Array<string>" name="commonJs"/>
    <prop type="!Array<string>" name="js"/>
    <prop type="!Array<string>" name="internals"/>
    <prop type="!Array<string>" name="deps"/>
  </type>
</types>